trigger:
  - main # Or whichever branch you use for releases

variables:
  dockerRegistryServiceConnection: 'dockerhub_connection' # This service connection is for the build stage to push to Docker Hub
  imageRepository: 'dmoayad/authentication_app_frontend' # Name of your Docker image on Docker Hub
  dockerFilePath: '$(Build.SourcesDirectory)/Dockerfile' # Path to your Dockerfile
  # scriptPath: '$(Build.SourcesDirectory)/deploy'
  tag: '$(Build.BuildId)'
  vmUsername: 'moayad'
  ssh-connection: 'jumphost-vm-connection'
  jumpHostIP: '13.86.93.117'
  frontendVm1PrivateIP: '10.0.2.4'
  frontendVm2PrivateIP: '10.0.2.5'
  sshKeySecureFile: 'key.pem' # Upload your SSH private key as a Secure File in Azure DevOps

stages:
  # - stage: BuildAndPush
  #   displayName: Build and push Docker image to Docker Hub
  #   jobs:
  #     - job: BuildPush
  #       displayName: Build and Push to Docker Hub
  #       pool:
  #         vmImage: 'ubuntu-latest' # Or your preferred agent image

  #       steps:
  #         - task: Docker@2
  #           displayName: Build and push an image to Docker Hub
  #           inputs:
  #             containerRegistry: '$(dockerRegistryServiceConnection)' # Use your Docker Hub Service Connection
  #             repository: '$(imageRepository)'
  #             command: 'buildAndPush'
  #             Dockerfile: '$(dockerFilePath)'
  #             tags: '$(tag)'

  - stage: DeployFrontend
    displayName: Deploy to Frontend VMs
    jobs:
      - deployment: DeployToFrontend
        displayName: Deploy Web App
        environment: 'production-frontend' # Or a suitable environment name
        strategy:
          runOnce:
            deploy:
              steps:
                # You may still need to install the SSH key if your jumphost requires it
                # based on the SSH Service Connection configuration.
                # - task: InstallSSHKey@0
                #   displayName: Install SSH Key
                #   inputs:
                #     knownHostsEntry: '' # You can leave this empty for now if using -o StrictHostKeyChecking=no
                #     sshPublicKey: '' # Leave empty when using a secure file for the private key
                #     sshKeySecureFile: '$(sshKeySecureFile)' # Your secure file name


                # Deploy to Frontend VM 1 via Jumphost
                # - task: Bash@3
                #   displayName: List files in source directory
                #   inputs:
                #     targetType: 'inline'
                #     script: 'ls -l $(Build.SourcesDirectory)'
                - task: SSH@0
                  displayName: Deploy to Frontend VM 1
                  inputs:
                    sshEndpoint: '$(ssh-connection)'
                    runOptions: 'inline' # Use inline option
                    inline: |

                      # Define the path to the private key on the jumphost
                      PRIVATE_KEY_PATH="~/key.pem"

                      # Ensure the private key has correct permissions (optional but recommended)
                      # This is less critical since you confirmed the permissions are already 600
                      # but doesn't hurt to keep as a safeguard.
                      chmod 600 "$PRIVATE_KEY_PATH" || true

                      # Build the command string to be executed on the jumphost
                      # Ensure correct quoting for the deploy command that will run on the frontend VM
                      DEPLOY_COMMAND="docker pull $(imageRepository):$(tag) \
                      && docker stop my-web-app-container || true \
                      && docker rm my-web-app-container || true \
                      && docker run -d --name my-web-app-container -p 80:3000 $(imageRepository):$(tag)"

                      # SSH to the frontend VM and execute the deploy command, explicitly using the private key
                      # Use single quotes around the DEPLOY_COMMAND variable to ensure it's treated as a single string
                      # by the remote shell on the frontend VM.
                      ssh -o StrictHostKeyChecking=no -i \"\$PRIVATE_KEY_PATH\" $(vmUsername)@$(frontendVm1PrivateIP) '\$DEPLOY_COMMAND'                
                      
                # # Deploy to Frontend VM 2 via Jumphost
                # - task: SSH@0
                #   displayName: Deploy to Frontend VM 2
                #   inputs:
                #     sshEndpoint: '$(ssh-connection)' # Reuse the SSH Service Connection to your Jumphost
                #     runOptions: 'script' # Use 'script' option
                #     scriptPath: '$(Build.SourcesDirectory)/deploy_frontend.sh' # Path to your deployment script
                #     arguments: '"$(vmUsername)" "$(frontendVm2PrivateIP)" "$(imageRepository)" "$(tag)"' # Pass variables as arguments (ACR name removed)
